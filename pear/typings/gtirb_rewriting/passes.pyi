"""
This type stub file was generated by pyright.
"""

import gtirb
import gtirb_functions
from typing import Sequence
from .rewriting import RewritingContext

class Pass:
    def begin_module(self, module: gtirb.Module, functions: Sequence[gtirb_functions.Function], rewriting_ctx: RewritingContext) -> None:
        """
        Invoked by the pass manager at the beginning of rewriting a module.
        Passes should use the rewriting context to register their insertions
        in this callback.

        :param module: The module being rewritten.
        :param functions: The calculated list of functions in the module.
        :param rewriting_context: The context to register modifications with.
        """
        ...
    
    def end_module(self, module: gtirb.Module, functions: Sequence[gtirb_functions.Function]) -> None:
        """
        Invoked by the pass manager after applying rewrites to a module.

        :param module: The module being rewritten.
        :param functions: The calculated list of functions in the module.
        """
        ...
    


class PassManager:
    """
    Maintains a list of registered passes and runs them on IR.
    """
    def __init__(self, logger=..., expensive_assertions=...) -> None:
        """
        :param logger: The logger to log to when rewriting.
        :param expensive_assertions: If enabled, extra assertions will be
        enabled that may have noticable run-time overhead.
        """
        ...
    
    def add(self, pass_inst: Pass) -> None:
        """
        Registers a pass with the pass manager.
        """
        ...
    
    def run(self, ir: gtirb.IR) -> None:
        """
        Runs the passes on the GTIRB IR.
        """
        ...
    


