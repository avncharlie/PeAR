"""
This type stub file was generated by pyright.
"""

import argparse
import os
import entrypoints as entrypoints_module
import gtirb
from abc import ABC, abstractmethod
from typing import Any, Iterable, List, Mapping, Optional, Type, Union
from typing_extensions import Protocol
from .passes import Pass

class DriverLoadError(RuntimeError):
    """
    A pass or driver failed to load from an entry point.
    """
    ...


class PassDriver(ABC):
    """
    A driver that provides command line options and creates a rewriting pass.
    """
    def add_options(self, group) -> None:
        """
        Add pass-specific options to an argparse group. Optional.
        :param group: The argparse group object (the result of
                      ArgumentParser.add_argument_group).

        Option names should be unique across passes, so consider names like
        --no-lep-init instead of just --no-init (where lep is part of the pass
        name).
        """
        ...
    
    @abstractmethod
    def create_pass(self, args: argparse.Namespace, ir: gtirb.IR) -> Pass:
        """
        Creates an instance of the pass to run.
        :param args: The parsed arguments for all pass drivers.
        :param ir: The IR the pass will be ran on.
        """
        ...
    
    def extra_libraries(self, module: gtirb.Module) -> Iterable[Union[str, os.PathLike]]:
        """
        Extra libraries that must be present in the same folder as the binary.
        Optional.
        :param module: The GTIRB Module that might need extra libraries.
        """
        ...
    
    def description(self) -> Optional[str]:
        """
        A description of what the pass does. Optional.
        """
        ...
    


class _EntryPointCompatible(Protocol):
    """
    A protocol compatible with a subset of entrypoint's Entrypoint class.
    """
    @property
    def name(self) -> str:
        ...
    
    @property
    def distro(self) -> Optional[entrypoints_module.Distribution]:
        ...
    
    def load(self) -> Any:
        ...
    


class _PassEntryPointAdaptor:
    """
    An entrypoint-compatible class that exposes a pass or pass driver as an
    entrypoint.
    """
    def __init__(self, name: str, pass_or_driver: Type[Union[Pass, PassDriver]]) -> None:
        ...
    
    def load(self) -> Any:
        ...
    


class _PassDriverAdaptor(PassDriver):
    """
    Exposes a Pass class as a PassDriver.
    """
    def __init__(self, pass_: Pass) -> None:
        ...
    
    def description(self) -> Optional[str]:
        ...
    
    def create_pass(self, args: argparse.Namespace, ir: gtirb.IR) -> Pass:
        ...
    


class _ListPassesAction(argparse.Action):
    """
    An argparse action that prints the list of available passes and exits.
    """
    def __init__(self, option_strings, entrypoints: List[_EntryPointCompatible], dest=..., default=..., help=...) -> None:
        ...
    
    def __call__(self, parser, namespace, values, option_string=...):
        ...
    


def main(name_or_class: Union[str, Type[Pass], Type[PassDriver]], *, argv: List[str] = ...) -> None:
    """
    Provides a standard command-line driver for a single rewriting transform.
    :param name_or_class: The entrypoint name (must match setup.py) or the
                          Pass class or PassDriver class.
    :param argv: The argv to use (defaults to sys.argv).
    """
    ...

def generic_main(*, argv: List[str] = ..., extra: Mapping[str, Union[Type[Pass], Type[PassDriver]]] = ...) -> None:
    """
    The generic gtirb-rewriting driver, used to implement the gtirb-rewriting
    command line tool.
    :param argv: The argv to use (defaults to sys.argv).
    :param extra: Extra passes or pass drivers to register.
    """
    ...

