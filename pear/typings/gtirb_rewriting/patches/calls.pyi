"""
This type stub file was generated by pyright.
"""

import dataclasses
import gtirb
from typing import Callable, Iterable, Optional, Union
from ..abi import CallingConventionDesc
from ..patch import InsertionContext, Patch

class CallPatch(Patch):
    """
    Inserts a call to a function with literal arguments.
    """
    ActualArgumentValue = Union[int, gtirb.Symbol]
    ArgumentValue = Union[Callable[[InsertionContext], "ActualArgumentValue"], "ActualArgumentValue",]
    def __init__(self, sym: gtirb.Symbol, args: Iterable[ArgumentValue] = ..., conv: Optional[CallingConventionDesc] = ..., **constraint_kwargs) -> None:
        """
        Initializes a call patch.

        sym: The symbol to call.
        args: An iterable of arguments to be passed to the function. They must
              be either integers or Symbols.
        conv: The calling convention description to use for the call. If
              absent, the default ABI calling convention is used.
        constraint_kwargs: Additional keyword arguments to be passed to the
                         patch's constraints.
        """
        ...
    
    def get_asm(self, insertion_context: InsertionContext) -> str:
        ...
    


class _CallPatchImpl:
    @dataclasses.dataclass
    class _PassedArg:
        value: CallPatch.ArgumentValue
        reg: Optional[str]
        ...
    
    
    def __init__(self, sym: gtirb.Symbol, module: gtirb.Module, args: Iterable[CallPatch.ArgumentValue], conv: CallingConventionDesc, **constraint_kwargs) -> None:
        ...
    
    def get_asm(self, insertion_context: InsertionContext) -> str:
        ...
    


class _CallPatchX86(_CallPatchImpl):
    def __init__(self, sym: gtirb.Symbol, args: Iterable[CallPatch.ArgumentValue], conv: CallingConventionDesc, **constraint_kwargs) -> None:
        ...
    
    def get_asm(self, insertion_context: InsertionContext) -> str:
        ...
    


class _CallPatchARM64(_CallPatchImpl):
    """
    Inserts a call to a function with literal arguments.
    """
    def __init__(self, sym: gtirb.Symbol, args: Iterable[CallPatch.ArgumentValue], conv: CallingConventionDesc, **constraint_kwargs) -> None:
        ...
    
    def get_asm(self, insertion_context: InsertionContext) -> str:
        ...
    


