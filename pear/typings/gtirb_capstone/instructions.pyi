"""
This type stub file was generated by pyright.
"""

import gtirb
import capstone_gt
import capstone_gt.x86
import capstone_gt.arm64
import capstone_gt.arm
import capstone_gt.mips
import capstone_gt.ppc
from enum import Enum
from typing import Iterator, List, Union
from dataclasses import dataclass

class AccessType(Enum):
    UNKNOWN = ...
    READ = ...
    WRITE = ...
    READ_WRITE = ...


CapstoneOp = Union[capstone_gt.x86.X86Op, capstone_gt.arm.ArmOp, capstone_gt.arm64.Arm64Op, capstone_gt.mips.MipsOp, capstone_gt.ppc.PpcOp,]
CapstoneMemoryAccess = Union[capstone_gt.x86.X86OpMem, capstone_gt.arm.ArmOpMem, capstone_gt.arm64.Arm64OpMem, capstone_gt.mips.MipsOpMem, capstone_gt.ppc.PpcOpMem,]
@dataclass
class MemoryAccess:
    addr: int
    type: AccessType
    op_mem: CapstoneMemoryAccess
    ...


class GtirbInstructionDecoder:
    """
    Class to obtain instruction information of gtirb basic blocks.
    """
    GTIRB_ISA_TO_CAPSTONE = ...
    GTIRB_ISA_TO_CAPSTONE_MODE = ...
    def __init__(self, arch: gtirb.Module.ISA) -> None:
        ...
    
    def get_instructions(self, block: gtirb.CodeBlock) -> Iterator[capstone_gt.CsInsn]:
        """
        Get capstone_gt instructions of a basic block.
        Note: This function gets raw instructions, without
        taking into account symbolic expressions.
        """
        ...
    
    def get_access_type(self, op: CapstoneOp) -> AccessType:
        """
        Get the capstone_gt operand's access type.
        """
        ...
    
    GTIRB_ISA_TO_CAPSTONE_MEM_OP = ...
    def get_memory_accesses(self, block: gtirb.CodeBlock) -> List[MemoryAccess]:
        """
        Get memory accesses of a basic block.
        Each memory access has an addr, an access type and the
        capstone_gt memory operand.

        NOTE: The address of the memory access is the address
        of the displacement in x86/x64 but it is the address
        of the instruction in all other architectures.
        """
        ...
    


