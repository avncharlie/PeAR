"""
This type stub file was generated by pyright.
"""

import gtirb
from gtirb_capstone.instructions import GtirbInstructionDecoder
from functools import lru_cache

class GtirbCapstoneError(Exception):
    ...


class RewritingContext:
    """Simple class to carry around our ir and associated capstone/keystone
    objects for use in rewriting that IR.
    """
    ks = ...
    ir = ...
    def __init__(self, ir, ks=...) -> None:
        ...
    
    def prepare_for_rewriting(self): # -> None:
        """Prepare an IR for rewriting using gtirb-capstone.

        Call this before you call any other method.
        """
        ...
    
    def isolate_byte_interval(self, module, block): # -> None:
        """Creates a new byte interval that consists of a single existing
        block.
        """
        ...
    
    def modify_block_insert(self, module, block, new_bytes, offset, logger=...): # -> None:
        """Insert bytes into a block."""
        ...
    
    @lru_cache()
    def get_instruction_decoder(self, arch: gtirb.Module.ISA) -> GtirbInstructionDecoder:
        """
        Return an instruction decoder for a given an isa.
        """
        ...
    
    def show_block_asm(self, block: gtirb.CodeBlock, arch: gtirb.Module.ISA = ..., logger=...): # -> None:
        """
        Disassemble and print the contents of a code block using
        the given architecture. If no architecture is given,
        it is taken from the block's module. If the block
        is not in a module, the function throws an error.
        """
        ...
    


