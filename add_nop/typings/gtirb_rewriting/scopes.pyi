"""
This type stub file was generated by pyright.
"""

import gtirb
import gtirb_functions
from enum import Enum
from typing import Optional, Pattern, Set, Union

ENTRYPOINT_NAME = ...
MAIN_NAME = ...
class BlockPosition(Enum):
    ENTRY = ...
    EXIT = ...
    ANYWHERE = ...


class Scope:
    """
    Scopes provide a declarative way to specify where in a program a patch
    should be applied.
    """
    ...


class AllBlocksScope(Scope):
    """
    Specifies that an insertion should happen in all code blocks. The
    functions that this inserts into can be controlled with a list of names
    (or regular expressions) to check the name against.
    """
    def __init__(self, position: BlockPosition, exclude_functions: Optional[Set[Union[str, Pattern]]] = ...) -> None:
        ...
    


class SingleBlockScope(Scope):
    """
    Specifies that an insertion should happen in a specific block of a program.
    """
    def __init__(self, block: gtirb.CodeBlock, position: BlockPosition) -> None:
        ...
    


class FunctionPosition(Enum):
    ENTRY = ...
    EXIT = ...


class AllFunctionsScope(Scope):
    """
    Specifies that an insertion should happen either in the entry blocks or
    exit blocks of functions. The functions that this inserts into can be
    controlled with a list of names (or regular expressions) to check the name
    against.
    """
    def __init__(self, position: FunctionPosition, block_position: BlockPosition, functions: Optional[Set[Union[str, Pattern]]] = ...) -> None:
        ...
    


class _SpecificLocationScope(Scope):
    def __init__(self, block: gtirb.ByteBlock, offset: int, replacement_length: int = ...) -> None:
        ...
    


def pattern_match(module: gtirb.Module, func: gtirb_functions.Function, match_set: Set[Union[str, Pattern]]) -> bool:
    """
    Determines if a function matches a set of regex patterns or literal names.

    :param module: The gtirb Module containing the Function.
    :param func: The Function to check.
    :param match_set: The names or patterns to match against.
    """
    ...

