"""
This type stub file was generated by pyright.
"""

import dataclasses
import mcasm
from typing import Dict, Set

X86Syntax = mcasm.X86Syntax
@dataclasses.dataclass
class Constraints:
    """
    Constraints related to the assembly code in a patch. These can be seen as
    metadata about the actual assembly in a patch and can impact where the
    patch gets placed if bubbling is allowed.
    """
    x86_syntax: X86Syntax = ...
    clobbers_flags: bool = ...
    clobbers_registers: Set[str] = ...
    scratch_registers: int = ...
    reads_registers: Set[str] = ...
    align_stack: bool = ...
    preserve_caller_saved_registers: bool = ...


class Register:
    """
    An architecture-specific register.

    Registers are not created directly and are instead given to patches by
    requesting scratch registers in their constraints.
    """
    def __init__(self, sizes: Dict[str, str], default_size: str) -> None:
        ...
    
    def __contains__(self, value) -> bool:
        ...
    
    def __eq__(self, other) -> bool:
        ...
    
    def __hash__(self) -> int:
        ...
    
    def __format__(self, spec: str) -> str:
        """
        Formats the register (or subregister) as its name.

        :param spec: The format type specifier. This can control which
                     subregister name is used.
                     x86-64 supports the following sizes:
                     - 8l, 8h, 16, 32, 64
        """
        ...
    
    @property
    def name(self) -> str:
        ...
    


@dataclasses.dataclass
class _AsmSnippet:
    code: str
    x86_syntax: X86Syntax = ...


