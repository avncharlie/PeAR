"""
This type stub file was generated by pyright.
"""

import gtirb
import gtirb_functions
from typing import Iterable, NamedTuple, Set, TypeVar

logger = ...
class AmbiguousIRError(RuntimeError):
    """
    The IR is ambiguous in terms of how it needs to be updated.
    """
    ...


class AmbiguousCFGError(AmbiguousIRError):
    ...


class CFGModifiedError(RuntimeError):
    ...


class _UnjoinableBlocksError(RuntimeError):
    ...


class _ReturnEdgeCache(gtirb.CFG):
    """
    A CFG subclass that provides a cache for return edges and proxy return
    edges.
    """
    def __init__(self, edges=...) -> None:
        ...
    
    def add(self, edge: gtirb.Edge) -> None:
        ...
    
    def clear(self) -> None:
        ...
    
    def discard(self, edge: gtirb.Edge) -> None:
        ...
    
    def any_return_edges(self, block: gtirb.CodeBlock) -> bool:
        """
        Determines if a block has any return edges.
        """
        ...
    
    def block_return_edges(self, block: gtirb.CodeBlock) -> Set[gtirb.Edge]:
        """
        Gets the set of return edges for a block.
        """
        ...
    
    def block_proxy_return_edges(self, block: gtirb.CodeBlock) -> Set[gtirb.Edge]:
        """
        Gets the set of return edges that target proxy blocks for a block.
        """
        ...
    


class _ModifyCache:
    """
    State that should be preserved across calls to _modify_block_insert to
    improve performance.
    """
    def __init__(self, module: gtirb.Module, functions: Iterable[gtirb_functions.Function], return_cache: _ReturnEdgeCache) -> None:
        ...
    
    def in_same_function(self, block1: gtirb.CodeBlock, block2: gtirb.CodeBlock) -> bool:
        """
        Determines if two blocks are in the same function.
        """
        ...
    
    def is_entry_block(self, block: gtirb.CodeBlock) -> bool:
        """
        Determines if a code block is a function entry.
        """
        ...
    


BlockT = TypeVar("BlockT", bound=gtirb.ByteBlock)
class JoinableResult(NamedTuple):
    result: bool
    reason: str
    def __bool__(self) -> bool:
        ...
    


