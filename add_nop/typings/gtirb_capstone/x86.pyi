"""
This type stub file was generated by pyright.
"""

import capstone_gt
import gtirb
from typing import Optional, Union

"""
Utilities for converting Capstone operands to assembly strings.
"""
def operand_size_to_str(size: int) -> str:
    """
    Gets the assembly operand type for a given size in bytes, in Intel syntax.
    """
    ...

def symbolic_expression_to_str(expr: gtirb.SymbolicExpression, *, extra_offset: int = ..., syntax: int = ...) -> str:
    """
    Converts a symbolic expression to an equivalent assembly string.
    :param sym_expr: The symbolic expression.
    :param extra_offset: A value to be added to the expression's offset.
    :param syntax: The assembly syntax to generate for. Only Intel is
           currently supported.
    """
    ...

def mem_access_to_str(inst: capstone_gt.CsInsn, mem: capstone_gt.x86.X86OpMem, sym_expr: Optional[gtirb.SymbolicExpression], *, extra_displacement: int = ..., syntax: int = ...) -> str:
    """
    Converts a Capstone memory reference into an equivalent assembly string.
    :param inst: The instruction containing the operand.
    :param mem: The memory operation.
    :param sym_expr: The symbolic expression for the displacement.
    :param extra_displacement: A value to be added to the displacement.
    :param syntax: The assembly syntax to generate for. Only Intel is
           currently supported.
    """
    ...

def operand_to_str(inst: capstone_gt.CsInsn, op: capstone_gt.x86.X86Op, sym_expr: Optional[gtirb.SymbolicExpression], *, extra_offset: int = ..., syntax: int = ...) -> str:
    """
    Converts a Capstone operand into an equivalent assembly string.
    :param inst: The instruction containing the operand.
    :param op: The operand.
    :param sym_expr: The symbolic expression for the operand. Only valid for
           memory and immediate operands.
    :param extra_offset: A value to be added to the displacement or immediate.
           Only valid for memory and immediate operands.
    :param syntax: The assembly syntax to generate for. Only Intel is
           currently supported.
    """
    ...

def operand_symbolic_expression(parent: Union[gtirb.CodeBlock, gtirb.ByteInterval], inst: capstone_gt.CsInsn, op: capstone_gt.x86.X86Op) -> Optional[gtirb.SymbolicExpression]:
    """
    Gets the symbolic expression, if any, associated with an operand.
    :param parent: The code block or byte interval containing the instruction.
    :param inst: The instruction containing the operand.
    :param op: The operand.
    """
    ...

