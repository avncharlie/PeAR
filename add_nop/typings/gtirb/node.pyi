"""
This type stub file was generated by pyright.
"""

import typing
import typing_extensions
from uuid import UUID

if typing.TYPE_CHECKING:
    ...
_T = typing.TypeVar("_T", bound="Node")
class _NodeMessage(typing_extensions.Protocol):
    uuid: bytes
    ...


class Node:
    """A Node is any GTIRB object which can be referenced by UUID.

    :ivar ~.uuid: The UUID of this Node.
    """
    def __init__(self, uuid: typing.Optional[UUID] = ...) -> None:
        """
        :param uuid: The UUID of this ``Node``,
            or None if a new UUID needs generated via :func:`uuid.uuid4`.
            Defaults to None.
        """
        ...
    
    def deep_eq(self, other: object) -> bool:
        """Check: is ``self`` structurally equal to ``other``?

        This method should be used only when deep structural equality checks
        are actually needed, and not for all equality checks. Typically the
        default implmentation of __eq__, which checks pointer equality, is
        sufficient; Nodes are cached such that references to two Nodes with
        the same UUID refer to the same exact object. Use this method when
        you have manually constructed Nodes that may share the same UUID
        despite being different objects, and you need to check for structural
        equality.
        """
        ...
    


