"""
This type stub file was generated by pyright.
"""

import typing
from uuid import UUID
from .block import Block
from .node import Node
from .ir import IR
from .module import Module

if typing.TYPE_CHECKING:
    ...
Payload = typing.Union[Block, int]
class Symbol(Node):
    """Represents a symbol, which maps a name to an object in the IR.

    :ivar ~.name: The name of this symbol.
    :ivar ~.at_end: True if this symbol is at the end of its referent, rather
        than at the beginning. Has no meaning for integral symbols.
    """
    name = ...
    _payload = ...
    def __init__(self, name: str, uuid: typing.Optional[UUID] = ..., payload: typing.Optional[Payload] = ..., at_end: bool = ..., module: typing.Optional[Module] = ...) -> None:
        """
        :param name: The name of this symbol.
        :param uuid: The UUID of this ``Symbol``,
            or None if a new UUID needs generated via :func:`uuid.uuid4`.
            Defaults to None.
        :param payload: The value this symbol points to.
            May be an address, a Node, or None.
        :param at_end: True if this symbol is at the end of its referent,
            rather than at the beginning.
        :param module: The :class:`Module` this symbol belongs to.
        """
        ...
    
    @property
    def value(self) -> typing.Optional[int]:
        """The value of a Symbol, which is an integer or None.
        ``value`` and ``referent`` are mutually exclusive.
        """
        ...
    
    @value.setter
    def value(self, value: typing.Optional[int]) -> None:
        ...
    
    @property
    def referent(self) -> typing.Optional[Block]:
        """The object referred to by a Symbol, which is :class:`Block`
        or None. ``value`` and ``referent`` are mutually exclusive.
        """
        ...
    
    @referent.setter
    def referent(self, referent: typing.Optional[Block]) -> None:
        ...
    
    def deep_eq(self, other: object) -> bool:
        ...
    
    def __repr__(self) -> str:
        ...
    
    @property
    def module(self) -> typing.Optional[Module]:
        ...
    
    @module.setter
    def module(self, value: typing.Optional[Module]) -> None:
        ...
    
    @property
    def ir(self) -> typing.Optional[IR]:
        """Get the IR this node ultimately belongs to."""
        ...
    


