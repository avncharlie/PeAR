"""
This type stub file was generated by pyright.
"""

from typing import Any, Callable, ClassVar, Optional, TYPE_CHECKING
from uuid import UUID
from .node import Node
from .serialization import Serialization
from .util import DictLike

if TYPE_CHECKING:
    ...
class _LazyDataContainer:
    """
    Container that holds the raw byte stream until it is read, then releases
    it. If it is never read, then serialization skips re-encoding (and
    deserializing) the data.
    """
    def __init__(self, raw_data: bytes, type_name: str, get_by_uuid: Callable[[UUID], Optional[Node]]) -> None:
        ...
    
    def get_data(self) -> object:
        """
        Get any pending still-serialized data, or return the passed data
        instead (the default).
        """
        ...
    
    def get_raw_data(self) -> bytes:
        """ """
        ...
    


class AuxData:
    """AuxData objects can be attached to the :class:`gtirb.IR` or individual
    :class:`gtirb.Module` s to store additional client-specific data in a
    portable way.

    AuxData represents a portable, language-independent manner of encoding
    rich data. To do this, all data is stored on disk as a series of bytes
    with a string describing the format of the data, called a *type name*. See
    :mod:`gtirb.serialization` for the list of all default types. Types may
    also be parameterized; for example, ``mapping<string,UUID>`` is a ``dict``
    from ``str`` objects to ``UUID`` objects. All ``AuxData`` requires
    a valid type name in order to be serialized.

    :ivar ~.data: The value stored in this AuxData.
    :ivar ~.type_name: A string describing the type of ``data``.
        Used to determine the proper codec for serializing this AuxData.
    """
    serializer: ClassVar[Serialization] = ...
    def __init__(self, data: object, type_name: str, lazy_container: Optional[_LazyDataContainer] = ...) -> None:
        """
        :param data: The value stored in this AuxData.
        :param type_name: A string describing the type of ``data``.
            Used to determine the proper codec for serializing this AuxData.
        :param lazy_container: An object that will lazily deserialize the
            auxdata table backing this object, or None.
        """
        ...
    
    @property
    def data(self) -> Any:
        ...
    
    @data.setter
    def data(self, value: object) -> None:
        ...
    
    def __repr__(self) -> str:
        ...
    


class AuxDataContainer(Node):
    """The base class for anything that holds AuxData tables; that is,
    :class:`gtirb.IR` and :class:`gtirb.Module`.

    :ivar ~.aux_data: The auxiliary data associated
            with the object, as a mapping from names to
            :class:`gtirb.AuxData`.
    """
    def __init__(self, aux_data: DictLike[str, AuxData] = ..., uuid: Optional[UUID] = ...) -> None:
        """
        :param aux_data: The initial auxiliary data to be associated
            with the object, as a mapping from names to
            :class:`gtirb.AuxData`. Defaults to an empty :class:`dict`.
        :param uuid: the UUID of this ``AuxDataContainer``,
            or None if a new UUID needs generated via :func:`uuid.uuid4`.
            Defaults to None.
        """
        ...
    
    def deep_eq(self, other: object) -> bool:
        """This overrides :func:`gtirb.Node.deep_eq` to check for
        AuxData equality.

        Because the values stored by AuxData are not necessarily
        amenable to deep checking, the auxiliary data dictionaries
        stored for ``self`` and ``other`` are not deeply checked. Instead,
        they are considered to be equal if their sets of keys are equal.
        """
        ...
    


