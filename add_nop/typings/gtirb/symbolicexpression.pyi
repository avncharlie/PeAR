"""
This type stub file was generated by pyright.
"""

import typing
from enum import Enum
from .symbol import Symbol

AttributesCtorType = typing.Iterable[typing.Union["SymbolicExpression_pb2.SymAttribute.ValueType", "SymbolicExpression.Attribute",]]
class SymbolicExpression:
    """Base class of symbolic expression types."""
    class Attribute(Enum):
        """Attributes representing a known property of a symbolic expression.
        See https://grammatech.github.io/gtirb/md__symbolic_expression.html
        """
        GOT = ...
        GOTPC = ...
        GOTOFF = ...
        GOTREL = ...
        PLT = ...
        PLTOFF = ...
        PCREL = ...
        SECREL = ...
        TLS = ...
        TLSGD = ...
        TLSLD = ...
        TLSLDM = ...
        TLSCALL = ...
        TLSDESC = ...
        TPREL = ...
        TPOFF = ...
        DTPREL = ...
        DTPOFF = ...
        DTPMOD = ...
        NTPOFF = ...
        PAGE = ...
        PAGEOFF = ...
        CALL = ...
        LO = ...
        HI = ...
        HIGHER = ...
        HIGHEST = ...
        GOTNTPOFF = ...
        INDNTPOFF = ...
        G0 = ...
        G1 = ...
        G2 = ...
        G3 = ...
        UPPER16 = ...
        LOWER16 = ...
        LO12 = ...
        LO15 = ...
        LO14 = ...
        HI12 = ...
        HI21 = ...
        S = ...
        PG = ...
        NC = ...
        ABS = ...
        PREL = ...
        PREL31 = ...
        TARGET1 = ...
        TARGET2 = ...
        SBREL = ...
        TLSLDO = ...
        HI16 = ...
        LO16 = ...
        GPREL = ...
        DISP = ...
        OFST = ...
        H = ...
        L = ...
        HA = ...
        HIGH = ...
        HIGHA = ...
        HIGHERA = ...
        HIGHESTA = ...
        TOCBASE = ...
        TOC = ...
        NOTOC = ...
        def __repr__(self) -> str:
            ...
        
        def __int__(self) -> int:
            ...
        
    
    
    def __init__(self, attributes: AttributesCtorType = ...) -> None:
        ...
    
    @property
    def symbols(self) -> typing.Iterable[Symbol]:
        """Get all the symbols involved with this symbolic expression,
        regardless of role.
        """
        ...
    
    def deep_eq(self, other: object) -> bool:
        ...
    


class SymAddrAddr(SymbolicExpression):
    """Represents a symbolic expression of the form
    "(Sym1 - Sym2) / Scale + Offset".

    :ivar ~.scale: Constant scale factor.
    :ivar ~.offset: Constant offset.
    :ivar ~.symbol1: Symbol representing the base address.
    :ivar ~.symbol2: Symbol to subtract from ``symbol1``.
    """
    def __init__(self, scale: int, offset: int, symbol1: Symbol, symbol2: Symbol, attributes: AttributesCtorType = ...) -> None:
        """
        :param scale: Constant scale factor.
        :param offset: Constant offset.
        :param symbol1: Symbol representing the base address.
        :param symbol2: Symbol to subtract from ``symbol1``.
        :param attributes: :class:`SymobolicExpression.Attribute`\\s of this
            expression.
        """
        ...
    
    def __eq__(self, other: object) -> bool:
        ...
    
    def __hash__(self) -> int:
        ...
    
    def __repr__(self) -> str:
        ...
    
    def deep_eq(self, other: object) -> bool:
        ...
    
    @property
    def symbols(self) -> typing.Iterable[Symbol]:
        ...
    


class SymAddrConst(SymbolicExpression):
    """Represents a symbolic expression of the form "Sym + Offset".

    :ivar ~.offset: Constant offset.
    :ivar ~.symbol: Symbol representing an address.
    """
    def __init__(self, offset: int, symbol: Symbol, attributes: AttributesCtorType = ...) -> None:
        """
        :param offset: Constant offset.
        :param symbol: Symbol representing an address.
        :param attributes: :class:`SymbolicExpression.Attribute`\\s of this
            expression.
        """
        ...
    
    def __eq__(self, other: object) -> bool:
        ...
    
    def __hash__(self) -> int:
        ...
    
    def __repr__(self) -> str:
        ...
    
    def deep_eq(self, other: object) -> bool:
        ...
    
    @property
    def symbols(self) -> typing.Iterable[Symbol]:
        ...
    


